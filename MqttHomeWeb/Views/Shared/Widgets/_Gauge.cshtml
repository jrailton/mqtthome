@using MqttHome.Config
@using MqttHome.Devices.Base
@using MqttHome.Mqtt
@model MqttHome.Device

@{
    var widget = (WidgetConfig)ViewBag.Widget;
    var gauge = widget.Gauge;
    var sensorDevice = Model as ISensorDevice<ISensorData>;
}

@if (gauge == null || sensorDevice == null)
{
    @Html.Raw("ERROR")
}
else
{
    <div id="@widget.Id" data-type="@widget.Type" data-value="@Model.Id.@widget.Id" class="widget widget-@Model.Config.Widgets.Count">

    </div>

    <script type="text/javascript">
        var @widget.Id = new Widget("@widget.Id",
            {
                min: @gauge.Min,
                max: @gauge.Max,
                name: "@(widget.Name ?? widget.ValueName)",
                value: @sensorDevice.SensorValues[widget.ValueName],
                valueLabel: "@Html.Raw(widget.FormattedValue(sensorDevice.SensorValues[widget.ValueName]))",
                colour: function(value) {
                    @for (var i = 0; i < gauge.ColourValues.Count; i++)
                    {
                        @Html.Raw($"if (value < {gauge.ColourValues[i]}) return \"{gauge.Colours[i]}\";")
                    }

                    @if (gauge.Colours.Count > gauge.ColourValues.Count)
                    {
                        @:return "@(gauge.Colours[gauge.ColourValues.Count])";
                    }
                    else
                    {
                        @:return "black";
                    }
                }
            }
        );
    </script>
}